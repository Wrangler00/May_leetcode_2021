A valid number can be split up into these components (in order):

A decimal number or an integer.
(Optional) An 'e' or 'E', followed by an integer.
A decimal number can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
One of the following formats:
At least one digit, followed by a dot '.'.
At least one digit, followed by a dot '.', followed by at least one digit.
A dot '.', followed by at least one digit.
An integer can be split up into these components (in order):

(Optional) A sign character (either '+' or '-').
At least one digit.
For example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90E3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].

Given a string s, return true if s is a valid number.

//cpp My solution

class Solution {
public:
    bool isInteger(string s){
        if(s.length()==0)   return false;
        
        bool onceNum = false;
        
        for(int i=0;i<s.length();i++){
            if(i==0 && s[i]!='-' && s[i]!='+' && !isdigit(s[i]))    return false;
            if(i!=0 && !isdigit(s[i]))  return false;
            onceNum = isdigit(s[i]) || onceNum;
        }
        
        return onceNum;
    }
    
    bool isDecimal(string s){
        if(s.length()==0)   return false;
        
        bool onceDot = false,onceNum = false;
        
        for(int i=0;i<s.length();i++){
            if(i==0 && s[i]!='-' && s[i]!='+' && s[i]!='.' && !isdigit(s[i]))
                return false;
            if(i!=0 && (!isdigit(s[i]) && s[i]!='.') || ((s[i]=='.' || !isdigit(s[i])) && onceDot))
                return false;
            
            onceDot = (s[i]=='.') || onceDot;
            onceNum = isdigit(s[i]) || onceNum;
        }
        
        return onceDot && onceNum;
    }
    
    bool isNumber(string s) {
        string s1="",s2="";    
        for(int i=0;i<s.length();i++){
            if(s[i]=='e' || s[i]=='E'){
                s2 = s.substr(i+1,s.length()-i-1);
                break;
            }
            s1+=s[i];
        }
        
        if(s1.length() == s.length())
            return isDecimal(s1) || isInteger(s1);
        else
            return (isDecimal(s1) || isInteger(s1)) && isInteger(s2);
    }
};
