Given an array of strings products and a string searchWord. We want to design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return list of lists of the suggested products after each character of searchWord is typed. 

 

Example 1:

Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
Output: [
["mobile","moneypot","monitor"],
["mobile","moneypot","monitor"],
["mouse","mousepad"],
["mouse","mousepad"],
["mouse","mousepad"]
]
Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
After typing mou, mous and mouse the system suggests ["mouse","mousepad"]
Example 2:

Input: products = ["havana"], searchWord = "havana"
Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
Example 3:

Input: products = ["bags","baggage","banner","box","cloths"], searchWord = "bags"
Output: [["baggage","bags","banner"],["baggage","bags","banner"],["baggage","bags"],["bags"]]
Example 4:

Input: products = ["havana"], searchWord = "tatiana"
Output: [[],[],[],[],[],[],[]]
 

Constraints:

1 <= products.length <= 1000
There are no repeated elements in products.
1 <= Î£ products[i].length <= 2 * 10^4
All characters of products[i] are lower-case English letters.
1 <= searchWord.length <= 1000
All characters of searchWord are lower-case English letters.



//cpp my solution
//accepted nut slow

class Solution {
public:
    vector<vector<string>> suggestedProducts(vector<string>& p, string q) {
        vector<vector<string>> ans;
        sort(p.begin(),p.end());
        
        vector<string> make = p;
        
        for(int i=0;i<q.length();i++){
            vector<string> tmp;
            
            for(int j=0;j<make.size();j++){
                if(make[j][i] == q[i])
                    tmp.push_back(make[j]);
            }
            
            make=tmp;
            ans.push_back(vector<string>(make.begin(),make.begin()+min(3,(int)make.size())));
        }
                          
        return ans;
    }
};

//solution2 using TRIE but very slow solution

class TrieNode{
    public:
    bool isend;
    vector<TrieNode*> children;
    
    TrieNode(){
        isend=false;
        children = vector<TrieNode*>(26,nullptr);
    }
};

class Trie{
    private:
        TrieNode* root=nullptr;
    public:
        void insert(string s){
            if(root==nullptr)
                root = new TrieNode();
            
            TrieNode* node=root;
            
            for(char &ch:s){
                ch = tolower(ch);
                if(node->children[ch-'a']==nullptr)
                    node->children[ch-'a'] = new TrieNode();
                node = node->children[ch-'a'];
            }
            node->isend=true;
        }
        
        void dfs(TrieNode* node,vector<string> &v,string &s){
            if(node==nullptr || v.size()==3)   return;
            
            if(node->isend)
                v.push_back(s);
            
            for(int i=0;i<26;i++){
                s+=char('a'+i);
                dfs(node->children[i],v,s);
                s.pop_back();
            }
            return;
        }
    
        vector<string> find(string s){
            vector<string> ans;
            
            TrieNode* node=root;
            
            for(char &ch:s){
                if(node==nullptr)   return ans;
               
                node = node->children[ch-'a'];
            }
            
            dfs(node,ans,s);
            return ans;
        }
};


class Solution {
public:
    vector<vector<string>> suggestedProducts(vector<string> &repo, string q) {
        Trie* t = new Trie();

        for(string &s: repo)
            t->insert(s);

        vector<vector<string>> ans;
        string st="";
        for(char &ch:q){
            st+=ch;
            ans.push_back(t->find(st));
        }
        return ans;
    }
};

//solution 3
//using shrinking window logic

//very fast solution 32 ms

class Solution {
public:
    vector<vector<string>> suggestedProducts(vector<string>& products, string searchWord) {
        sort(products.begin(), products.end());
        int a = 0;
        int b = products.size()-1;
        
        vector<vector<string>> result(searchWord.size());
        for (int i = 0; i < searchWord.size() && a <= b; ++i) {
            while (
                a <= b &&
                // Skip products[a] if index i is not a match
                (products[a].size() <= i || products[a][i] != searchWord[i])
            ) {
                ++a;
            }
            while (
                a <= b &&
                // Skip products[b] if index i is not a match
                (products[b].size() <= i || products[b][i] != searchWord[i])
            ) {
                --b;
            }
            
            // Pick the first 3 starting from a,
            // but not going over b
            for (int k = a; k <= b && k < a+3; ++k) {
                result[i].push_back(products[k]);
            }
        }
        return result;
    }
};
